@model ProductDetailDto

@{
    ViewData["Title"] = Model.Name;
    var selectedColorId = ViewBag.SelectedColorId as int?;
    var selectedSizeId = ViewBag.SelectedSizeId as int?;
}

<h1 class="my-4">@Model?.Name</h1>

<input type="hidden" id="productId" value="@Model.Id" />
<input type="hidden" id="regionCode" value="@ViewBag.CurrentRegion" />

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6 p-1">
                <img class="img-fluid product-image Sirv" src="@Model?.DefaultImageUrl?profile=basic?w=300" alt="@Model?.Name">
                <div id="variant-images">
                    @if (Model.SelectedVariant?.Images != null && Model.SelectedVariant.Images.Any())
                    {
                        <div class="image-gallery">
                            @foreach (var img in Model.SelectedVariant.Images)
                            {
                                <img src="@img.ImageUrl" alt="Product Image" class="img-thumbnail me-2" style="max-height: 100px;" />
                            }
                        </div>
                    }
                </div>
            </div>
            
            <div class="col-md-6">
                <h3 class="my-3">@SharedLocalizer["ProductDetails"]</h3>
                <p>@SharedLocalizer["Sku"]: @Model?.Sku</p>
                <p id="product-price">@SharedLocalizer["Price"]: $@Model?.Price?.ToString("0.00") @Model.Currency</p>
                <p>@SharedLocalizer["Category"]: @Model?.Category</p>
                <p>@SharedLocalizer["Weight"]: @Model?.WeightKg kg</p>
                <p>@SharedLocalizer["Dimensions"]: @Model?.LengthCm cm x @Model?.WidthCm cm x @Model?.HeightCm cm</p>
                <p>
                    @if (Model?.EstimatedAvailableStock.HasValue == true)
                    {
                        if (Model.EstimatedAvailableStock.Value > 0)
                        {
                            <span class="text-success fw-bold">@SharedLocalizer["EstimatedStock"]: @Model.EstimatedAvailableStock.Value</span>
                            if (Model.EstimatedAvailableStock.Value <= 5)
                            {
                                <span class="text-warning fw-bold">@SharedLocalizer["LowStock"] (@SharedLocalizer["FromWarehouse"] @Model.FulfillingWarehouseName)</span>
                            }
                        }
                        else
                        {
                            <span class="text-danger fw-bold">@SharedLocalizer["OutofStock"]</span>
                        }
                    }
                    else
                    {
                        <span class="text-info">@SharedLocalizer["StockInfoNotAvailable"] @SharedLocalizer["TrySettingLocationOnHomePage"]</span>
                    }
                </p>
                @if (!string.IsNullOrEmpty(Model?.FulfillingWarehouseName))
                {
                    <p class="text-muted">@SharedLocalizer["FulfillingFrom"] @Model.FulfillingWarehouseName (@Model.FulfillingWarehouseAddress)</p>
                }

                <div id="variant-options">
                    @Html.Partial("_VariantOptionsPartial", Model)
                </div>

                <form asp-controller="Product" asp-action="AddToCart" method="post" class="mt-4">

                    <div class="input-group mb-3" style="max-width: 200px;">
                        <input type="number" name="quantity" class="form-control" value="1" min="1" max="100" />
                        <button type="submit" class="btn btn-primary" @(Model?.EstimatedAvailableStock == 0 ? "disabled" : "")>
                            <i class="bi bi-cart-plus"></i> @SharedLocalizer["AddtoCart"]
                        </button>
                    </div>
                    @if (Model?.EstimatedAvailableStock == 0)
                    {
                        <p class="text-danger">@SharedLocalizer["ThisProductIsCurrentlyOutOfStock"]</p>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {


            function updateUrlParams(colorId, sizeId) {
                const url = new URL(window.location.href);
                if (colorId) url.searchParams.set("color", colorId);
                if (sizeId) url.searchParams.set("size", sizeId);
                window.history.replaceState({}, '', url);
            }

            function fetchVariantOptions() {
                const colorId = document.querySelector('.color-option.btn-primary')?.dataset.value;
                const sizeId = document.querySelector('.size-option.btn-primary')?.dataset.value;
                const productId = document.getElementById("productId").value;
                const regionCode = document.getElementById("regionCode").value;

                updateUrlParams(colorId, sizeId);

                $.ajax({
                    url: `/${productId}/GetVariantPartial/${regionCode}?color=${colorId}&size=${sizeId}`,
                    type: 'GET',
                    success: function (response) {
                        if (response) {
                            document.getElementById("variant-options").innerHTML = response;
                            bindOptionEvents();
                            updatePriceAndImages();
                        } else {
                            alert(response);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding to cart: ", error);
                        alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                    }
                });
            }

            function updatePriceAndImages() {
                const colorId = document.querySelector('.color-option.btn-primary')?.dataset.value;
                const sizeId = document.querySelector('.size-option.btn-primary')?.dataset.value;
                const productId = document.getElementById("productId").value;
                const regionCode = document.getElementById("regionCode").value;

                $.ajax({
                    url: `/${productId}/GetVariantData?color=${colorId}&size=${sizeId}`,
                    type: 'GET',
                    success: function (response) {
                        if (response.isSuccess) {
                            const data = response.data;
                            if (data && data.priceAdjustment) {
                                const price = @Html.Raw(Json.Serialize(Model.Price));
                                const basePrice = parseFloat(price);
                                const totalPrice = basePrice + parseFloat(data.priceAdjustment);
                                document.getElementById("product-price").innerText = `$${totalPrice.toFixed(2)}`;
                            }

                            const imageContainer = document.getElementById("variant-images");
                            imageContainer.innerHTML = "";
                            if (data.images && data.images.length > 0) {
                                const gallery = document.createElement("div");
                                gallery.className = "image-gallery";
                                data.images.forEach(img => {
                                    const image = document.createElement("img");
                                    image.src = img.imageUrl;
                                    image.className = "img-thumbnail me-2";
                                    image.style.maxHeight = "100px";
                                    gallery.appendChild(image);
                                });
                                imageContainer.appendChild(gallery);
                            }
                        } else {
                            alert(data);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding to cart: ", error);
                        alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                    }
                });

            }

            function bindOptionEvents() {
                document.querySelectorAll(".color-option").forEach(btn => {
                    btn.addEventListener("click", (e) => {
                        e.preventDefault();
                        document.querySelectorAll(".color-option").forEach(b => b.classList.remove("btn-primary"));
                        btn.classList.add("btn-primary");
                        fetchVariantOptions();
                    });
                });

                document.querySelectorAll(".size-option").forEach(btn => {
                    btn.addEventListener("click", (e) => {
                        e.preventDefault();
                        document.querySelectorAll(".size-option").forEach(b => b.classList.remove("btn-primary"));
                        btn.classList.add("btn-primary");
                        fetchVariantOptions();
                    });
                });
            }

            bindOptionEvents();

            $('#addToCartBtn').click(function () {
                var productId = $(this).data('product-id');
                var productName = $(this).data('product-name'); // For success message only
                var price = $(this).data('product-price'); // For success message only
                var currency = $(this).data('product-currency'); // For success message only
                var quantity = $('#productQuantity').val();

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: { productId: productId, quantity: quantity },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Update cart item count in the header
                            const cartCountElement = document.getElementById('cart-item-count');
                            if (cartCountElement) {
                                cartCountElement.innerText = response.cartItemCount;
                            }
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding to cart: ", error);
                        alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                    }
                });
            });
        });
    </script>
}