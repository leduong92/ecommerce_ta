@model ProductDetailDto

@{
    ViewData["Title"] = Model.Name;
    var selectedColorId = ViewBag.SelectedColorId as int?;
    var selectedSizeId = ViewBag.SelectedSizeId as int?;
}

<h1 class="my-4">@Model?.Name</h1>

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6 p-1">
                <img class="img-fluid product-image Sirv" src="@Model?.DefaultImageUrl?profile=basic?w=300" alt="@Model?.Name">
            </div>
            <div class="col-md-6">
                <h3 class="my-3">@SharedLocalizer["ProductDetails"]</h3>
                <p>@SharedLocalizer["Sku"]: @Model?.Sku</p>
                <p id="price-display">@SharedLocalizer["Price"]: $@Model?.Price?.ToString("0.00") @Model.Currency</p>
                <p>@SharedLocalizer["Category"]: @Model?.Category</p>
                <p>@SharedLocalizer["Weight"]: @Model?.WeightKg kg</p>
                <p>@SharedLocalizer["Dimensions"]: @Model?.LengthCm cm x @Model?.WidthCm cm x @Model?.HeightCm cm</p>
                @if (Model.ColorOptions.Count > 0)
                {
                    <div>
                        <h4>Color</h4>
                        <div class="color-options">
                            @foreach (var color in Model.ColorOptions)
                            {
                                var isSelected = color.IsSelected ? "btn-primary" : "btn-outline-primary";
                                <button class="color-option btn btn-sm @isSelected" data-value="@color.ValueId" data-selected="@(color.IsSelected.ToString().ToLower())">@color.Value</button>
                            }
                        </div>
                    </div>
                }
                @if (Model.SizeOptions.Count > 0)
                {
                    <div>
                        <h4>Size</h4>
                        <div class="size-options">
                            @foreach (var size in Model.SizeOptions)
                            {
                                var isSelected = size.IsSelected ? "btn-primary" : "btn-outline-primary";
                                <button class="size-option btn btn-sm @isSelected" data-value="@size.ValueId" data-selected="@(size.IsSelected.ToString().ToLower())">@size.Value</button>
                            }
                        </div>
                    </div>
                }
            
                @if (Model.SelectedVariant != null)
                {
                    <div>
                        <img src="@Model.SelectedVariant.Images.FirstOrDefault(i => i.IsPrimary)?.ImageUrl" width="200" />
                        <p>SKU: @Model.SelectedVariant.Sku</p>
                        <p>Variant Price: $@Model.SelectedVariant.PriceAdjustment.ToString("0.00")</p>
                    </div>
                    <input type="hidden" id="variantId" value="@Model.SelectedVariant.Id" />
                }
                <p>
                    @if (Model?.EstimatedAvailableStock.HasValue == true)
                    {
                        if (Model.EstimatedAvailableStock.Value > 0)
                        {
                            <span class="text-success fw-bold">@SharedLocalizer["EstimatedStock"]: @Model.EstimatedAvailableStock.Value</span>
                            if (Model.EstimatedAvailableStock.Value <= 5)
                            {
                                <span class="text-warning fw-bold">@SharedLocalizer["LowStock"] (@SharedLocalizer["FromWarehouse"] @Model.FulfillingWarehouseName)</span>
                            }
                        }
                        else
                        {
                            <span class="text-danger fw-bold">@SharedLocalizer["OutofStock"]</span>
                        }
                    }
                    else
                    {
                        <span class="text-info">@SharedLocalizer["StockInfoNotAvailable"] @SharedLocalizer["TrySettingLocationOnHomePage"]</span>
                    }
                </p>
                @if (!string.IsNullOrEmpty(Model?.FulfillingWarehouseName))
                {
                    <p class="text-muted">@SharedLocalizer["FulfillingFrom"] @Model.FulfillingWarehouseName (@Model.FulfillingWarehouseAddress)</p>
                }

                <form asp-controller="Product" asp-action="AddToCart" method="post" class="mt-4">
                    <input type="hidden" name="productId" value="@Model?.Id" />
                    <input type="hidden" name="regionCode" value="@ViewBag.CurrentRegion" />
                    <div class="input-group mb-3" style="max-width: 200px;">
                        <input type="number" name="quantity" class="form-control" value="1" min="1" max="100" />
                        <button type="submit" class="btn btn-primary" @(Model?.EstimatedAvailableStock == 0 ? "disabled" : "")>
                            <i class="bi bi-cart-plus"></i> @SharedLocalizer["AddtoCart"]
                        </button>
                        @* <button class="btn btn-primary" id="addToCartBtn" data-product-id="@Model.Id" data-product-name="@Model.Name" data-product-price="@Model.Price" data-product-currency="@Model.Currency">
                            @SharedLocalizer["AddToCart"]
                        </button> *@
                    </div>
                    @if (Model?.EstimatedAvailableStock == 0)
                    {
                        <p class="text-danger">@SharedLocalizer["ThisProductIsCurrentlyOutOfStock"]</p>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function updateUrlParams(newColorId, newSizeId) {
                const url = new URL(window.location.href);
                const currentColor = url.searchParams.get("color");
                const currentSize = url.searchParams.get("size");

                const colorId = newColorId || currentColor;
                const sizeId = newSizeId || currentSize;

                if (colorId) url.searchParams.set("color", colorId);
                if (sizeId) url.searchParams.set("size", sizeId);

                window.location.href = url.toString(); // Reload with updated values
            }

            document.querySelectorAll(".color-option").forEach(el => {
                el.addEventListener("click", () => {
                    const colorId = el.dataset.value;
                    updateUrlParams(colorId, null);
                });
            });

            document.querySelectorAll(".size-option").forEach(el => {
                el.addEventListener("click", () => {
                    const sizeId = el.dataset.value;
                    updateUrlParams(null, sizeId);
                });
            });

            $('#addToCartBtn').click(function () {
                var productId = $(this).data('product-id');
                var productName = $(this).data('product-name'); // For success message only
                var price = $(this).data('product-price'); // For success message only
                var currency = $(this).data('product-currency'); // For success message only
                var quantity = $('#productQuantity').val();

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: { productId: productId, quantity: quantity },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Update cart item count in the header
                            const cartCountElement = document.getElementById('cart-item-count');
                            if (cartCountElement) {
                                cartCountElement.innerText = response.cartItemCount;
                            }
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding to cart: ", error);
                        alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                    }
                });
            });
        });
    </script>
}