@model ProductDetailDto

@{
    ViewData["Title"] = Model?.Name ?? SharedLocalizer["ProductDetails"];
}

<h1 class="my-4">@Model?.Name</h1>

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6 p-1">
                <img class="img-fluid product-image Sirv" src="@Model?.DefaultImageUrl?profile=basic?w=300" alt="@Model?.Name">
            </div>
            <div class="col-md-6">
                <h3 class="my-3">@SharedLocalizer["ProductDetails"]</h3>
                <h4>@SharedLocalizer["Price"]: @Model?.Price?.ToString("N2") @Model?.Currency</h4>
                <p>@SharedLocalizer["Category"]: @Model?.Category</p>
                <p>@SharedLocalizer["Weight"]: @Model?.WeightKg kg</p>
                <p>@SharedLocalizer["Dimensions"]: @Model?.LengthCm cm x @Model?.WidthCm cm x @Model?.HeightCm cm</p>
                <div>
                    <div>
                        <label>Color:</label>
                        <select id="colorSelect">
                            @foreach (var option in Model.ColorOptions)
                            {
                                <option value="@option.ValueId" data-variant-ids="@string.Join(",", option.VariantIds)" selected=@(option.IsSelected ? "selected" : null)>@option.Value</option>
                            }
                        </select>
                    </div>
                    <div>
                        @foreach(var color in Model.SelectedVariant.ImageList)
                        {
                            <div>@color.ImageUrl</div>
                        }
                    </div>
                </div>

                <div>
                    <label>Size:</label>
                    <select id="sizeSelect">
                        @foreach (var option in Model.SizeOptions)
                        {
                            <option value="@option.ValueId" data-variant-ids="@string.Join(",", option.VariantIds)" selected=@(option.IsSelected ? "selected" : null)>@option.Value</option>
                        }
                    </select>
                </div>

                <p>@SharedLocalizer["Sku"]: @Model?.Sku</p>
                <p>
                    @if (Model?.EstimatedAvailableStock.HasValue == true)
                    {
                        if (Model.EstimatedAvailableStock.Value > 0)
                        {
                            <span class="text-success fw-bold">@SharedLocalizer["EstimatedStock"]: @Model.EstimatedAvailableStock.Value</span>
                            if (Model.EstimatedAvailableStock.Value <= 5)
                            {
                                <span class="text-warning fw-bold">@SharedLocalizer["LowStock"] (@SharedLocalizer["FromWarehouse"] @Model.FulfillingWarehouseName)</span>
                            }
                        }
                        else
                        {
                            <span class="text-danger fw-bold">@SharedLocalizer["OutofStock"]</span>
                        }
                    }
                    else
                    {
                        <span class="text-info">@SharedLocalizer["StockInfoNotAvailable"] @SharedLocalizer["TrySettingLocationOnHomePage"]</span>
                    }
                </p>
                @if (!string.IsNullOrEmpty(Model?.FulfillingWarehouseName))
                {
                    <p class="text-muted">@SharedLocalizer["FulfillingFrom"] @Model.FulfillingWarehouseName (@Model.FulfillingWarehouseAddress)</p>
                }

                <form asp-controller="Product" asp-action="AddToCart" method="post" class="mt-4">
                    <input type="hidden" name="productId" value="@Model?.Id" />
                    <input type="hidden" name="regionCode" value="@ViewBag.CurrentRegion" />
                    <div class="input-group mb-3" style="max-width: 200px;">
                        <input type="number" name="quantity" class="form-control" value="1" min="1" max="100" />
                        <button type="submit" class="btn btn-primary" @(Model?.EstimatedAvailableStock == 0 ? "disabled" : "")>
                            <i class="bi bi-cart-plus"></i> @SharedLocalizer["AddtoCart"]
                        </button>
                        @* <button class="btn btn-primary" id="addToCartBtn" data-product-id="@Model.Id" data-product-name="@Model.Name" data-product-price="@Model.Price" data-product-currency="@Model.Currency">
                            @SharedLocalizer["AddToCart"]
                        </button> *@
                    </div>
                    @if (Model?.EstimatedAvailableStock == 0)
                    {
                        <p class="text-danger">@SharedLocalizer["ThisProductIsCurrentlyOutOfStock"]</p>
                    }
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const colorSelect = document.getElementById('colorSelect');
            const sizeSelect = document.getElementById('sizeSelect');

            function findMatchingVariant() {
                const colorVariants = colorSelect.options[colorSelect.selectedIndex].dataset.variantIds.split(',');
                const sizeVariants = sizeSelect.options[sizeSelect.selectedIndex].dataset.variantIds.split(',');
                const match = colorVariants.find(id => sizeVariants.includes(id));
                if (match) {
                    $.ajax({
                        url: '@Url.Action("GetVariant", "Product")',
                        type: 'GET',
                        data: { variantId: match },
                        success: function (response) {
                            document.getElementById('mainImage').src = data.imageUrl;
                            document.getElementById('sku').textContent = data.sku;
                            document.getElementById('price').textContent = `$${data.price}`;
                        },
                        error: function (xhr, status, error) {
                            console.error("Error adding to cart: ", error);
                            alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                        }
                    });
                    // fetch(`/Product/GetVariant?variantId=${match}`)
                    //     .then(res => res.json())
                    //     .then(data => {
                    //         document.getElementById('mainImage').src = data.imageUrl;
                    //         document.getElementById('sku').textContent = data.sku;
                    //         document.getElementById('price').textContent = `$${data.price}`;
                    //     });
                }
            }

            colorSelect.addEventListener('change', findMatchingVariant);
            sizeSelect.addEventListener('change', findMatchingVariant);

            $('#addToCartBtn').click(function () {
                var productId = $(this).data('product-id');
                var productName = $(this).data('product-name'); // For success message only
                var price = $(this).data('product-price'); // For success message only
                var currency = $(this).data('product-currency'); // For success message only
                var quantity = $('#productQuantity').val();

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: { productId: productId, quantity: quantity },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Update cart item count in the header
                            const cartCountElement = document.getElementById('cart-item-count');
                            if (cartCountElement) {
                                cartCountElement.innerText = response.cartItemCount;
                            }
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding to cart: ", error);
                        alert('@SharedLocalizer["ErrorAddingProductToCart"].Value');
                    }
                });
            });
        });
    </script>
}